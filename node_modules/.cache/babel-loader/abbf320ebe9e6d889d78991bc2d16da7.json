{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  } // Возврат ответа об ошибке от сервера\n\n\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    } //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n\n\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResponse);\n  } // getUserInfo(callback, errback) {\n  //   return fetch(`${this._baseUrl}/users/me`, {\n  //     headers: this._headers,\n  //   })\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     });\n  // }\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkResponse);\n  } // getCards(callback, errback) {\n  //   return fetch(`${this._baseUrl}/cards`, {\n  //       headers: this._headers,\n  //     })\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  // }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @returns \n   */\n\n\n  editProfile(userData, callback, errback, finalback) {\n    if (!userData.name) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    if (!userData.about) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify(userData)\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(() => {\n      finalback(\"Сохранить\");\n    });\n  }\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  addCard(cardData, callback, errback, finalback) {\n    if (!cardData.name) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    if (!cardData.link) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'POST',\n      headers: hdr,\n      body: JSON.stringify(cardData)\n    };\n    return fetch(url, opts).then(this._checkResponse); // .then((result) => {\n    //   callback(result);\n    // })\n    // .catch((err) => {\n    //   errback(err);\n    // })\n    // .finally(() => {\n    //   finalback(\"Создать\");\n    // });\n  }\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  deleteCard(cardId, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n    return fetch(url, opts).then(this._checkResponse); // .then((result) => {\n    //   callback(result);\n    // })\n    // .catch((err) => {\n    //   errback(err);\n    // });\n  }\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  putLike(cardId, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: 'PUT',\n      headers: this._headers\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    });\n  }\n  /**\n   * Метод удаления лайка с карточки \n   * @param {String} cardId Идентификатор карточки\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  deleteLike(cardId, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: 'DELETE',\n      headers: this._headers\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    });\n  }\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  renewAvatar(avatarLink, callback, errback, finalback) {\n    if (!avatarLink) {\n      console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me/avatar`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(finalback);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/mesto-react/src/utils/Api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_checkResponse","res","ok","json","Promise","reject","statusText","status","getUserInfo","fetch","then","getCards","editProfile","userData","callback","errback","finalback","name","console","error","about","url","hdr","opts","method","body","JSON","stringify","result","catch","err","finally","addCard","cardData","link","deleteCard","cardId","putLike","deleteLike","renewAvatar","avatarLink","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  // Возврат ответа об ошибке от сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    }\n    //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponse)\n  }\n  // getUserInfo(callback, errback) {\n  //   return fetch(`${this._baseUrl}/users/me`, {\n  //     headers: this._headers,\n  //   })\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     });\n  // }\n\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n        headers: this._headers,\n      })\n        .then(this._checkResponse)\n  }\n  // getCards(callback, errback) {\n  //   return fetch(`${this._baseUrl}/cards`, {\n  //       headers: this._headers,\n  //     })\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  // }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @returns \n   */\n  editProfile(userData, callback, errback, finalback) {\n\n    if (!userData.name) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n    if (!userData.about) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify(userData)\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      })\n      .finally(() => {\n        finalback(\"Сохранить\");\n      });\n  }\n\n\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  addCard(cardData, callback, errback, finalback) {\n\n    if(!cardData.name) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n    if(!cardData.link) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n\n    const opts = {\n      method: 'POST',\n      headers: hdr,\n      body: JSON.stringify(cardData)\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      // .then((result) => {\n      //   callback(result);\n      // })\n      // .catch((err) => {\n      //   errback(err);\n      // })\n      // .finally(() => {\n      //   finalback(\"Создать\");\n      // });\n  }\n\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  deleteCard(cardId, callback, errback) {\n    \n    if(!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      // .then((result) => {\n      //   callback(result);\n      // })\n      // .catch((err) => {\n      //   errback(err);\n      // });\n  }\n\n\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  putLike(cardId, callback, errback){\n\n    if(!cardId) {\n      console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: 'PUT',\n      headers: this._headers\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      });\n  }\n\n\n  /**\n   * Метод удаления лайка с карточки \n   * @param {String} cardId Идентификатор карточки\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  deleteLike(cardId, callback, errback) {\n\n    if(!cardId) {\n      console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: 'DELETE',\n      headers: this._headers\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n     });\n  }\n\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  renewAvatar(avatarLink, callback, errback, finalback) {\n    \n    if(!avatarLink) {\n      console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me/avatar`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    };\n\n    return fetch(url, opts)\n    .then(this._checkResponse)\n    .then((result) => {\n      callback(result);\n    })\n    .catch((err) => {\n      errback(err);\n    })\n    .finally(finalback);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n  },\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}