{"ast":null,"code":"var _jsxFileName = \"/Users/Stasya/Desktop/dev/mesto-react/src/components/EditAvatarPopup.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\nimport { popupInputClass } from '../utils/constants'; //---------------------------------------------------------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditAvatarPopup(props) {\n  _s();\n\n  const currentUser = React.useContext(CurrentUserContext);\n  const inputRef = React.useRef();\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [errorClasses, setErrorClasses] = React.useState({\n    input: '',\n    error: ''\n  });\n  const [isSubmitDisabled, setIsSubmitDisabled] = React.useState(false);\n  React.useEffect(() => {\n    if (props.isOpen) {\n      inputRef.current.value = currentUser.avatar;\n      setIsSubmitDisabled(false);\n    } else {\n      inputRef.current.value = '';\n      setIsSubmitDisabled(true);\n    }\n\n    ;\n    setErrorMessage('');\n    setErrorClasses({\n      input: '',\n      error: ''\n    });\n  }, [currentUser, props.isOpen]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onUpdateAvatar(inputRef.current.value);\n  };\n\n  const handleInput = e => {\n    const {\n      validity,\n      validationMessage\n    } = e.target;\n    setErrorMessage(validationMessage);\n    setErrorClasses({\n      input: !validity.valid ? popupInputClass.inputError : '',\n      error: !validity.valid ? popupInputClass.error : ''\n    });\n    setIsSubmitDisabled(!validity.valid);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    name: \"avatar\",\n    title: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\",\n    button: \"avatar\",\n    submitDisabled: isSubmitDisabled,\n    isOpen: props.isOpen,\n    onClose: props.onClose,\n    buttonSubmitText: props.buttonSubmitText,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"url\",\n      ref: inputRef,\n      id: \"avatar-input\",\n      name: \"avatar\",\n      pattern: \"https?://.+\",\n      className: `popup__input popup__input_type_avatar ${errorClasses.input}`,\n      placeholder: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0443\",\n      required: true,\n      onInput: handleInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `popup__input-error popup__input-error_active ${errorClasses.error}`,\n      id: \"avatar-input-error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this);\n} // function EditAvatarPopup(props) {\n//     const inputRef = React.useRef(); // позволяет сохранить некоторый объект, который можно можно изменять и который хранится в течение всей жизни компонента.\n//     function handleSubmit(evt) {\n//         evt.preventDefault();\n//         props.onUpdateAvatar(inputRef.current.value);\n//     };\n//     React.useEffect(() =>{\n//         inputRef.current.value = '';\n//     },[props.isOpen]);\n//     //---------------------------------------------------------------------------------------------------------------------\n//     return(\n//         <PopupWithForm\n//             name=\"avatar\"\n//             button=\"avatar\"\n//             title=\"Обновить аватар\"\n//             isOpen={props.isOpen}\n//             onClose={props.onClose}\n//             buttonSubmitText={props.buttonSubmitText}\n//             onSubmit={handleSubmit}\n//         >\n//             <input\n//                 id=\"avatar-input\"\n//                 type=\"url\"\n//                 className=\"popup__input popup__input_type_avatar\"\n//                 name=\"avatar\"\n//                 placeholder=\"Ссылка на картинку\"\n//                 required\n//                 ref={inputRef}\n//             />\n//             <span\n//                 id=\"avatar-input-error\"\n//                 className=\"popup__input-error popup__input-error_active\"\n//             ></span>\n//         </PopupWithForm>\n//     );\n// }\n\n\n_s(EditAvatarPopup, \"8xS80i5VFp500dvJo06yS5IxfKw=\");\n\n_c = EditAvatarPopup;\nexport default EditAvatarPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditAvatarPopup\");","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/mesto-react/src/components/EditAvatarPopup.js"],"names":["React","PopupWithForm","CurrentUserContext","popupInputClass","EditAvatarPopup","props","currentUser","useContext","inputRef","useRef","errorMessage","setErrorMessage","useState","errorClasses","setErrorClasses","input","error","isSubmitDisabled","setIsSubmitDisabled","useEffect","isOpen","current","value","avatar","handleSubmit","e","preventDefault","onUpdateAvatar","handleInput","validity","validationMessage","target","valid","inputError","onClose","buttonSubmitText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\nimport {popupInputClass} from '../utils/constants';\n//---------------------------------------------------------------------------------------------------------------------\nfunction EditAvatarPopup(props) {\n    const currentUser = React.useContext(CurrentUserContext);\n    const inputRef = React.useRef();\n    const [errorMessage, setErrorMessage] = React.useState('');\n    const [errorClasses, setErrorClasses] = React.useState({input: '', error: '', });\n    const [isSubmitDisabled, setIsSubmitDisabled] = React.useState(false);\n  \n    React.useEffect(() => {\n      if (props.isOpen) {\n        inputRef.current.value = currentUser.avatar;\n        setIsSubmitDisabled(false);\n      } else {\n        inputRef.current.value = '';\n        setIsSubmitDisabled(true);\n      };\n      setErrorMessage('');\n      setErrorClasses({input: '', error: '', });\n    }, [currentUser, props.isOpen]);\n\n    const handleSubmit = (e) => {\n      e.preventDefault();\n      props.onUpdateAvatar(inputRef.current.value);\n    };\n  \n    const handleInput = (e) => {\n      const {validity, validationMessage} = e.target;\n      setErrorMessage(validationMessage);\n      setErrorClasses({\n        input: !validity.valid ? popupInputClass.inputError : '', \n        error: !validity.valid ? popupInputClass.error : '', \n      });\n      setIsSubmitDisabled(!validity.valid);\n    };\n  \n    return (\n      <PopupWithForm \n        name=\"avatar\"\n        title=\"Обновить аватар\" \n        button=\"avatar\"\n        submitDisabled={isSubmitDisabled}      \n        isOpen={props.isOpen} \n        onClose={props.onClose}\n        buttonSubmitText={props.buttonSubmitText}\n        onSubmit={handleSubmit}\n      >\n          <input type=\"url\" ref={inputRef}\n            id=\"avatar-input\" name=\"avatar\" \n            pattern=\"https?://.+\" \n            className={`popup__input popup__input_type_avatar ${errorClasses.input}`}  \n            placeholder=\"Ссылка на картинку\" \n            required\n            onInput={handleInput}\n          />\n          <span\n            className={`popup__input-error popup__input-error_active ${errorClasses.error}`}  \n            id=\"avatar-input-error\"\n          >\n            {errorMessage}\n          </span>  \n      </PopupWithForm>\n    );\n  }\n// function EditAvatarPopup(props) {\n//     const inputRef = React.useRef(); // позволяет сохранить некоторый объект, который можно можно изменять и который хранится в течение всей жизни компонента.\n    \n//     function handleSubmit(evt) {\n//         evt.preventDefault();\n//         props.onUpdateAvatar(inputRef.current.value);\n//     };\n\n//     React.useEffect(() =>{\n//         inputRef.current.value = '';\n//     },[props.isOpen]);\n\n//     //---------------------------------------------------------------------------------------------------------------------\n    \n//     return(\n//         <PopupWithForm\n//             name=\"avatar\"\n//             button=\"avatar\"\n//             title=\"Обновить аватар\"\n//             isOpen={props.isOpen}\n//             onClose={props.onClose}\n//             buttonSubmitText={props.buttonSubmitText}\n//             onSubmit={handleSubmit}\n//         >\n//             <input\n//                 id=\"avatar-input\"\n//                 type=\"url\"\n//                 className=\"popup__input popup__input_type_avatar\"\n//                 name=\"avatar\"\n//                 placeholder=\"Ссылка на картинку\"\n//                 required\n//                 ref={inputRef}\n//             />\n//             <span\n//                 id=\"avatar-input-error\"\n//                 className=\"popup__input-error popup__input-error_active\"\n//             ></span>\n//         </PopupWithForm>\n//     );\n// }\n\nexport default EditAvatarPopup;"]},"metadata":{},"sourceType":"module"}