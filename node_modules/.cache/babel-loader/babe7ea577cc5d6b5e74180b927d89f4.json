{"ast":null,"code":"export class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = void 0;\n    this._headers = void 0;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  } // Возврат ответа об ошибке от сервера\n\n\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    } // Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n\n\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n  /**\n   * Метод получения карточек с сервера \n   */\n\n\n  _getCards() {\n    return fetch(`${this._baseUrl}/images/search`, {\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   */\n\n\n  addCard(cardData) {\n    if (!cardData.name) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    if (!cardData.link) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards`;\n    const hdr = this._headers; //@ts-ignore: Object is possibly 'undefined'.\n\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'POST',\n      headers: hdr,\n      body: JSON.stringify(cardData)\n    };\n    return fetch(url, opts).then(this._checkResponse);\n  }\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   */\n\n\n  deleteCard(cardId) {\n    if (!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers; //@ts-ignore: Object is possibly 'undefined'.\n\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n    return fetch(url, opts).then(this._checkResponse);\n  }\n  /**\n   * Метод постановки/удаления лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   */\n\n\n  changeLike(cardId, like) {\n    if (!cardId) {\n      console.error(\"Api.changeLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: like ? 'PUT' : 'DELETE',\n      headers: this._headers\n    };\n    return fetch(url, opts).then(this._checkResponse);\n  }\n\n}\nexport const api = new Api({\n  baseUrl: \"https://api.thecatapi.com/v1\",\n  headers: {\n    authorization: \"36fd24cf-21f4-4937-a994-55df7314c816\",\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/Stasya/Desktop/alpha-project/src/utils/Api.tsx"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","ok","json","Promise","reject","statusText","status","_getCards","fetch","then","addCard","cardData","name","console","error","link","url","hdr","opts","method","body","JSON","stringify","deleteCard","cardId","changeLike","like","api","authorization"],"mappings":"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","sourcesContent":["export class Api {\n\n  private _baseUrl: any;\n  private _headers: HeadersInit | undefined;\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  // Возврат ответа об ошибке от сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    }\n    // Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n\n  /**\n   * Метод получения карточек с сервера \n   */\n  _getCards() {\n    return fetch(`${this._baseUrl}/images/search`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponse)\n  }\n\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   */\n  addCard(cardData) {\n    if(!cardData.name) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n    if(!cardData.link) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards`;\n    const hdr = this._headers;\n    //@ts-ignore: Object is possibly 'undefined'.\n    hdr['Content-Type'] = 'application/json';\n\n    const opts = {\n      method: 'POST',\n      headers: hdr,\n      body: JSON.stringify(cardData)\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n  }\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   */\n  deleteCard(cardId) {\n    if(!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    //@ts-ignore: Object is possibly 'undefined'.\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n  }\n\n  /**\n   * Метод постановки/удаления лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   */\n  changeLike(cardId, like){\n    if(!cardId) {\n      console.error(\"Api.changeLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: (like ? 'PUT' : 'DELETE'),\n      headers: this._headers\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n  }\n}\n\nexport const api = new Api({\n  baseUrl: \"https://api.thecatapi.com/v1\",\n  headers: {\n    authorization: \"36fd24cf-21f4-4937-a994-55df7314c816\",\n    'Content-Type': 'application/json'\n  }\n})"]},"metadata":{},"sourceType":"module"}