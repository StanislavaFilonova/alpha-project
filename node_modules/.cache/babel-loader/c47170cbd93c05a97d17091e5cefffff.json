{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  } // Возврат ответа об ошибке от сервера\n\n\n  checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    } //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n\n\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(result => this.checkResponse(result));\n  } // getUserInfo(callback, errback) {\n  //   return fetch(`${this._baseUrl}/users/me`, {\n  //     headers: this._headers,\n  //   })\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     });\n  // }\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      method: 'GET'\n    }).then(result => this.checkResponse(result));\n  } // getCards(callback, errback) {\n  //   return fetch(`${this._baseUrl}/cards`, {\n  //       headers: this._headers,\n  //     })\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  // }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @returns \n   */\n\n\n  editProfile(userData, callback, errback, finalback) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(userData)\n    }).then(result => this.checkResponse(result)); // if (!userData.name) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n    // if (!userData.about) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n    // const hdr = this._headers;\n    // hdr['Content-Type'] = 'application/json';\n    // const opts = {\n    //   method: 'PATCH',\n    //   headers: hdr,\n    //   body: JSON.stringify(userData)\n    // };\n    // return fetch(url, opts)\n    //   .then(this._checkResponse)\n    //   // .then((result) => {\n    //   //   callback(result);\n    //   // })\n    //   // .catch((err) => {\n    //   //   errback(err);\n    //   // })\n    //   // .finally(() => {\n    //   //   finalback(\"Сохранить\");\n    //   // });\n  }\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  addCard(cardData, callback, errback, finalback) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(cardData)\n    }).then(result => this.checkResponse(result));\n  } //   if(!cardData.name) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   if(!cardData.link) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   const url = `${this._baseUrl}/cards`;\n  //   const hdr = this._headers;\n  //   hdr['Content-Type'] = 'application/json';\n  //   const opts = {\n  //     method: 'POST',\n  //     headers: hdr,\n  //     body: JSON.stringify(cardData)\n  //   };\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     })\n  //     .finally(() => {\n  //       finalback(\"Создать\");\n  //     });\n  // }\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(result => this.checkResponse(result));\n  } // deleteCard(cardId, callback, errback) {\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   const url = `${this._baseUrl}/cards/${cardId}`;\n  //   const hdr = this._headers;\n  //   hdr['Content-Type'] = 'application/json';\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: hdr\n  //   };\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     // .then((result) => {\n  //     //   callback(result);\n  //     // })\n  //     // .catch((err) => {\n  //     //   errback(err);\n  //     // });\n  // }\n\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  changeLike(cardId, like, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: like ? 'PUT' : 'DELETE',\n      headers: this._headers\n    };\n    return fetch(url, opts).then(result => this.checkResponse(result)); // .then((result) => {\n    //   callback(result);\n    // })\n    // .catch((err) => {\n    //   errback(err);\n    // });\n  } // /**\n  //  * Метод удаления лайка с карточки \n  //  * @param {String} cardId Идентификатор карточки\n  //  * @param {Function} callback \n  //  * @param {Function} errback \n  //  */\n  // deleteLike(cardId, callback, errback) {\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   };\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //    });\n  // }\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  renewAvatar(avatarLink, callback, errback, finalback) {\n    if (!avatarLink) {\n      console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me/avatar`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    };\n    return fetch(url, opts).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(finalback);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/mesto-react/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","checkResponse","res","ok","json","Promise","reject","statusText","status","getUserInfo","fetch","method","then","result","getCards","editProfile","userData","callback","errback","finalback","body","JSON","stringify","addCard","cardData","deleteCard","cardId","changeLike","like","console","error","url","opts","renewAvatar","avatarLink","hdr","avatar","catch","err","finally","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  // Возврат ответа об ошибке от сервера\n  checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    }\n    //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(result => this.checkResponse(result));\n  }\n  // getUserInfo(callback, errback) {\n  //   return fetch(`${this._baseUrl}/users/me`, {\n  //     headers: this._headers,\n  //   })\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     });\n  // }\n\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n        headers: this._headers,\n        method: 'GET',\n      })\n      .then(result => this.checkResponse(result))\n  }\n  // getCards(callback, errback) {\n  //   return fetch(`${this._baseUrl}/cards`, {\n  //       headers: this._headers,\n  //     })\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  // }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @returns \n   */\n  editProfile(userData, callback, errback, finalback) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(userData)\n  })\n    .then(result => this.checkResponse(result))\n    // if (!userData.name) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n    // if (!userData.about) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n\n    // const hdr = this._headers;\n    // hdr['Content-Type'] = 'application/json';\n\n    // const opts = {\n    //   method: 'PATCH',\n    //   headers: hdr,\n    //   body: JSON.stringify(userData)\n    // };\n\n    // return fetch(url, opts)\n    //   .then(this._checkResponse)\n    //   // .then((result) => {\n    //   //   callback(result);\n    //   // })\n    //   // .catch((err) => {\n    //   //   errback(err);\n    //   // })\n    //   // .finally(() => {\n    //   //   finalback(\"Сохранить\");\n    //   // });\n  }\n\n\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  addCard(cardData, callback, errback, finalback) {\n    return fetch (`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(cardData)\n    })\n    .then(result => this.checkResponse(result))\n  }\n  //   if(!cardData.name) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   if(!cardData.link) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n\n  //   const url = `${this._baseUrl}/cards`;\n  //   const hdr = this._headers;\n  //   hdr['Content-Type'] = 'application/json';\n\n  //   const opts = {\n  //     method: 'POST',\n  //     headers: hdr,\n  //     body: JSON.stringify(cardData)\n  //   };\n\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     })\n  //     .finally(() => {\n  //       finalback(\"Создать\");\n  //     });\n  // }\n\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n   deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n    .then(result => this.checkResponse(result));\n  }\n\n  // deleteCard(cardId, callback, errback) {\n    \n  //   if(!cardId) {\n  //     console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n\n  //   const url = `${this._baseUrl}/cards/${cardId}`;\n  //   const hdr = this._headers;\n  //   hdr['Content-Type'] = 'application/json';\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: hdr\n  //   };\n\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     // .then((result) => {\n  //     //   callback(result);\n  //     // })\n  //     // .catch((err) => {\n  //     //   errback(err);\n  //     // });\n  // }\n\n\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  changeLike(cardId, like, callback, errback){\n\n    if(!cardId) {\n      console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: (like ? 'PUT' : 'DELETE'),\n      headers: this._headers\n    };\n\n    return fetch(url, opts)\n    .then(result => this.checkResponse(result))\n      // .then((result) => {\n      //   callback(result);\n      // })\n      // .catch((err) => {\n      //   errback(err);\n      // });\n  }\n\n\n  // /**\n  //  * Метод удаления лайка с карточки \n  //  * @param {String} cardId Идентификатор карточки\n  //  * @param {Function} callback \n  //  * @param {Function} errback \n  //  */\n  // deleteLike(cardId, callback, errback) {\n\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n\n  //   const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   };\n\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //    });\n  // }\n\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  renewAvatar(avatarLink, callback, errback, finalback) {\n    if(!avatarLink) {\n      console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me/avatar`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    };\n\n    return fetch(url, opts)\n    .then((result) => {\n      callback(result);\n    })\n    .catch((err) => {\n      errback(err);\n    })\n    .finally(finalback);\n  }\n}\n\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n    'Content-Type': 'application/json'\n  },\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}