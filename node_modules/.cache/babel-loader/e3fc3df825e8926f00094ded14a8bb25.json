{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  } // Возврат ответа об ошибке от сервера\n\n\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    } //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n\n\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResponse);\n  } // getUserInfo(callback, errback) {\n  //   return fetch(`${this._baseUrl}/users/me`, {\n  //     headers: this._headers,\n  //   })\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     });\n  // }\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n\n\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      method: 'GET'\n    }).then(this._checkResponse);\n  } // getCards(callback, errback) {\n  //   return fetch(`${this._baseUrl}/cards`, {\n  //       headers: this._headers,\n  //     })\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  // }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @returns \n   */\n\n\n  editProfile(userData, callback, errback, finalback) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(userData)\n    }).then(this._checkResponse); // if (!userData.name) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n    // if (!userData.about) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n    // const hdr = this._headers;\n    // hdr['Content-Type'] = 'application/json';\n    // const opts = {\n    //   method: 'PATCH',\n    //   headers: hdr,\n    //   body: JSON.stringify(userData)\n    // };\n    // return fetch(url, opts)\n    //   .then(this._checkResponse)\n    //   // .then((result) => {\n    //   //   callback(result);\n    //   // })\n    //   // .catch((err) => {\n    //   //   errback(err);\n    //   // })\n    //   // .finally(() => {\n    //   //   finalback(\"Сохранить\");\n    //   // });\n  }\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  addCard(cardData, callback, errback, finalback) {\n    return fetch(`${this.this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(cardData)\n    }).then(this._checkResponse);\n  } //   if(!cardData.name) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   if(!cardData.link) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   const url = `${this._baseUrl}/cards`;\n  //   const hdr = this._headers;\n  //   hdr['Content-Type'] = 'application/json';\n  //   const opts = {\n  //     method: 'POST',\n  //     headers: hdr,\n  //     body: JSON.stringify(cardData)\n  //   };\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     })\n  //     .finally(() => {\n  //       finalback(\"Создать\");\n  //     });\n  // }\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  deleteCard(cardId, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n    return fetch(url, opts).then(this._checkResponse); // .then((result) => {\n    //   callback(result);\n    // })\n    // .catch((err) => {\n    //   errback(err);\n    // });\n  }\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  changeLike(cardId, like, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: like ? 'PUT' : 'DELETE',\n      headers: this._headers\n    };\n    return fetch(url, opts).then(this._checkResponse); // .then((result) => {\n    //   callback(result);\n    // })\n    // .catch((err) => {\n    //   errback(err);\n    // });\n  } // /**\n  //  * Метод удаления лайка с карточки \n  //  * @param {String} cardId Идентификатор карточки\n  //  * @param {Function} callback \n  //  * @param {Function} errback \n  //  */\n  // deleteLike(cardId, callback, errback) {\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   };\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //    });\n  // }\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  renewAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`), {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }.then(this._checkResponse);\n  }\n\n} //     if(!avatarLink) {\n//       console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n//       return;\n//     }\n//     const url = `${this._baseUrl}/users/me/avatar`;\n//     const hdr = this._headers;\n//     hdr['Content-Type'] = 'application/json';\n//     const opts = {\n//       method: 'PATCH',\n//       headers: hdr,\n//       body: JSON.stringify({\n//         avatar: avatarLink\n//       })\n//     };\n//     return fetch(url, opts)\n//     // .then((result) => {\n//     //   callback(result);\n//     // })\n//     // .catch((err) => {\n//     //   errback(err);\n//     // })\n//     // .finally(finalback);\n//   }\n// }\n\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\"\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/mesto-react/src/utils/Api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_checkResponse","res","ok","json","Promise","reject","statusText","status","getUserInfo","fetch","then","getCards","method","editProfile","userData","callback","errback","finalback","body","JSON","stringify","addCard","cardData","this","deleteCard","cardId","console","error","url","hdr","opts","changeLike","like","renewAvatar","data","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  // Возврат ответа об ошибке от сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    }\n    //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponse)\n  }\n  // getUserInfo(callback, errback) {\n  //   return fetch(`${this._baseUrl}/users/me`, {\n  //     headers: this._headers,\n  //   })\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     });\n  // }\n\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n        headers: this._headers,\n        method: 'GET',\n      })\n        .then(this._checkResponse)\n  }\n  // getCards(callback, errback) {\n  //   return fetch(`${this._baseUrl}/cards`, {\n  //       headers: this._headers,\n  //     })\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  // }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @returns \n   */\n  editProfile(userData, callback, errback, finalback) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify(userData)\n  })\n  .then(this._checkResponse)\n    // if (!userData.name) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n    // if (!userData.about) {\n    //   console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n    //   return;\n    // }\n\n    // const hdr = this._headers;\n    // hdr['Content-Type'] = 'application/json';\n\n    // const opts = {\n    //   method: 'PATCH',\n    //   headers: hdr,\n    //   body: JSON.stringify(userData)\n    // };\n\n    // return fetch(url, opts)\n    //   .then(this._checkResponse)\n    //   // .then((result) => {\n    //   //   callback(result);\n    //   // })\n    //   // .catch((err) => {\n    //   //   errback(err);\n    //   // })\n    //   // .finally(() => {\n    //   //   finalback(\"Сохранить\");\n    //   // });\n  }\n\n\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  addCard(cardData, callback, errback, finalback) {\n    return fetch (`${this.this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify(cardData)\n    }) \n    .then(this._checkResponse)\n  }\n  //   if(!cardData.name) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   if(!cardData.link) {\n  //     console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n\n  //   const url = `${this._baseUrl}/cards`;\n  //   const hdr = this._headers;\n  //   hdr['Content-Type'] = 'application/json';\n\n  //   const opts = {\n  //     method: 'POST',\n  //     headers: hdr,\n  //     body: JSON.stringify(cardData)\n  //   };\n\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //     })\n  //     .finally(() => {\n  //       finalback(\"Создать\");\n  //     });\n  // }\n\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  deleteCard(cardId, callback, errback) {\n    \n    if(!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      // .then((result) => {\n      //   callback(result);\n      // })\n      // .catch((err) => {\n      //   errback(err);\n      // });\n  }\n\n\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  changeLike(cardId, like, callback, errback){\n\n    if(!cardId) {\n      console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: (like ? 'PUT' : 'DELETE'),\n      headers: this._headers\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      // .then((result) => {\n      //   callback(result);\n      // })\n      // .catch((err) => {\n      //   errback(err);\n      // });\n  }\n\n\n  // /**\n  //  * Метод удаления лайка с карточки \n  //  * @param {String} cardId Идентификатор карточки\n  //  * @param {Function} callback \n  //  * @param {Function} errback \n  //  */\n  // deleteLike(cardId, callback, errback) {\n\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n\n  //   const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   };\n\n  //   return fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //    });\n  // }\n\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  renewAvatar(data) {\n    return fetch (`${this._baseUrl}/users/me/avatar`), {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      })\n    }\n    .then(this._checkResponse)\n  }\n}\n//     if(!avatarLink) {\n//       console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n//       return;\n//     }\n\n//     const url = `${this._baseUrl}/users/me/avatar`;\n//     const hdr = this._headers;\n//     hdr['Content-Type'] = 'application/json';\n//     const opts = {\n//       method: 'PATCH',\n//       headers: hdr,\n//       body: JSON.stringify({\n//         avatar: avatarLink\n//       })\n//     };\n\n//     return fetch(url, opts)\n\n//     // .then((result) => {\n//     //   callback(result);\n//     // })\n//     // .catch((err) => {\n//     //   errback(err);\n//     // })\n//     // .finally(finalback);\n//   }\n// }\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n  },\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}