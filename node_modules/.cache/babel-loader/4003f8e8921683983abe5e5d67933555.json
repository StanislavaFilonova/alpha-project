{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  } // Возврат ответа об ошибке от сервера\n\n\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    } //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n\n\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n\n\n  getUserInfo(callback, errback) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    });\n  }\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n\n\n  getCards(callback, errback) {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    });\n  }\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n\n\n  editProfile(userData, callback, errback, finalback) {\n    if (!userData.name) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    if (!userData.about) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify(userData)\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(finalback);\n  }\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n\n\n  addCard(cardData, callback, errback, finalback) {\n    if (!cardData.name) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    if (!cardData.link) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'POST',\n      headers: hdr,\n      body: JSON.stringify(cardData)\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(finalback);\n  }\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n\n\n  deleteCard(cardId, callback, errback, finalback) {\n    if (!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(finalback);\n  }\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n\n\n  changeLike(cardId, like, callback, errback) {\n    if (!cardId) {\n      console.error(\"Api.changeLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: like ? 'PUT' : 'DELETE',\n      headers: this._headers\n    };\n    return fetch(url, opts).then(result => this._checkResponse(result)).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    });\n  } //  /**\n  //    * Метод постановки лайка на карточку\n  //    * @param {String} cardId Идентификатор карточки \n  //    * @param {Function} callback \n  //    * @param {Function} errback \n  //    */\n  //   putLike(cardId, callback, errback){\n  //     if(!cardId) {\n  //       console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //       return;\n  //     }\n  //     const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //     const opts = {\n  //       method: 'PUT',\n  //       headers: this._headers\n  //     };\n  //     fetch(url, opts)\n  //       .then(this._checkResponse)\n  //       .then((result) => {\n  //         callback(result);\n  //       })\n  //       .catch((err) => {\n  //         errback(err);\n  //       });\n  //   }\n  // /**\n  //  * Метод удаления лайка с карточки \n  //  * @param {String} cardId Идентификатор карточки\n  //  * @param {Function} callback \n  //  * @param {Function} errback \n  //  */\n  // deleteLike(cardId, callback, errback) {\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n  //   const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   };\n  //   fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //    });\n  // // }\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n\n\n  renewAvatar(avatarLink, callback, errback, finalback) {\n    if (!avatarLink) {\n      console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me/avatar`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    };\n    return fetch(url, opts).then(this._checkResponse).then(result => {\n      callback(result);\n    }).catch(err => {\n      errback(err);\n    }).finally(finalback);\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/Stasya/Desktop/dev/mesto-react/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","ok","json","Promise","reject","statusText","status","getUserInfo","callback","errback","fetch","then","result","catch","err","getCards","editProfile","userData","finalback","name","console","error","about","url","hdr","opts","method","body","JSON","stringify","finally","addCard","cardData","link","deleteCard","cardId","changeLike","like","renewAvatar","avatarLink","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  // Возврат ответа об ошибке от сервера\n  _checkResponse(res) {\n    if (res.ok) {\n      // Метод .json принимает предоставленный JSON, строит его и отправляет его клиенту\n      return res.json();\n    }\n    //  Promise  позволяет создать обертку для значения, который еще не известен при создании промиса. Нужен дял асинхронных операций\n    return Promise.reject(`Ошибка: ${res.statusText}, с кодом: ${res.status}`);\n  }\n\n  /**\n   * Метод получения информации о пользователе с сервера \n   * @param {Function} callback Функция обработки успешного ответа от сервера, получает информацию о пользователе  \n   * @param {Function} errback Функция обработки ошибки от сервера\n   */\n  getUserInfo(callback, errback) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      });\n  }\n\n  /**\n   * Метод получения карточек с сервера \n   * @param {Function} callback принимает идентификатор пользователя и результат принятия \n   * @param {Function} errback \n   */\n  getCards(callback, errback) {\n    return fetch(`${this._baseUrl}/cards`, {\n        headers: this._headers,\n    })\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      });\n  }\n\n  /**\n   * Метод редактирования профиля пользователя\n   * @param {Object} userData Данные о пользователе\n   * userData.name {String} \n   * userData.about {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n  editProfile(userData, callback, errback, finalback) {\n    if (!userData.name) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n    if (!userData.about) {\n      console.error(\"Api.editProfile в аргументе userData не передано обязательное поле 'about'. Запрос не будет выполнен.\");\n      return;\n    }\n    const url = `${this._baseUrl}/users/me`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify(userData)\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      })\n      .finally(finalback);\n  }\n\n  /**\n   * Метод загрузки новой карточки на сервер\n   * @param {Object} cardData Данные о карточке\n   * cardData.name {String}\n   * cardData.link {String}\n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n  addCard(cardData, callback, errback, finalback) {\n    if(!cardData.name) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'name'. Запрос не будет выполнен.\");\n      return;\n    }\n    if(!cardData.link) {\n      console.error(\"Api.addCard в аргументе cardData не передано обязательное поле 'link'. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n\n    const opts = {\n      method: 'POST',\n      headers: hdr,\n      body: JSON.stringify(cardData)\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      })\n      .finally(finalback);\n  }\n\n  /**\n   * Метод удаления карточки \n   * @param {String} cardId Индентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n  deleteCard(cardId, callback, errback, finalback) {\n    if(!cardId) {\n      console.error(\"Api.deleteCard не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n    const url = `${this._baseUrl}/cards/${cardId}`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'DELETE',\n      headers: hdr\n    };\n\n    return fetch(url, opts)\n      .then(this._checkResponse)\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      })\n      .finally(finalback);\n  }\n\n  /**\n   * Метод постановки лайка на карточку\n   * @param {String} cardId Идентификатор карточки \n   * @param {Function} callback \n   * @param {Function} errback \n   */\n  changeLike(cardId, like, callback, errback){\n    if(!cardId) {\n      console.error(\"Api.changeLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/cards/likes/${cardId}`;\n    const opts = {\n      method: (like ? 'PUT' : 'DELETE'),\n      headers: this._headers\n    };\n\n    return fetch(url, opts)\n      .then(result => this._checkResponse(result))\n      .then((result) => {\n        callback(result);\n      })\n      .catch((err) => {\n        errback(err);\n      });\n  }\n\n//  /**\n//    * Метод постановки лайка на карточку\n//    * @param {String} cardId Идентификатор карточки \n//    * @param {Function} callback \n//    * @param {Function} errback \n//    */\n//   putLike(cardId, callback, errback){\n\n//     if(!cardId) {\n//       console.error(\"Api.putLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n//       return;\n//     }\n\n//     const url = `${this._baseUrl}/cards/likes/${cardId}`;\n//     const opts = {\n//       method: 'PUT',\n//       headers: this._headers\n//     };\n\n//     fetch(url, opts)\n//       .then(this._checkResponse)\n//       .then((result) => {\n//         callback(result);\n//       })\n//       .catch((err) => {\n//         errback(err);\n//       });\n//   }\n\n\n  // /**\n  //  * Метод удаления лайка с карточки \n  //  * @param {String} cardId Идентификатор карточки\n  //  * @param {Function} callback \n  //  * @param {Function} errback \n  //  */\n  // deleteLike(cardId, callback, errback) {\n\n  //   if(!cardId) {\n  //     console.error(\"Api.deleteLike не передан обязательный аргумент cardId. Запрос не будет выполнен.\");\n  //     return;\n  //   }\n\n  //   const url = `${this._baseUrl}/cards/likes/${cardId}`;\n  //   const opts = {\n  //     method: 'DELETE',\n  //     headers: this._headers\n  //   };\n\n  //   fetch(url, opts)\n  //     .then(this._checkResponse)\n  //     .then((result) => {\n  //       callback(result);\n  //     })\n  //     .catch((err) => {\n  //       errback(err);\n  //    });\n  // // }\n\n\n  /**\n   * Метод обновления аватара\n   * @param {String} avatarLink \n   * @param {Function} callback \n   * @param {Function} errback \n   * @param {Function} finalback\n   */\n  renewAvatar(avatarLink, callback, errback, finalback) {\n    if(!avatarLink) {\n      console.error(\"Api.renewAvatar не передан обязательный аргумент avatarLink. Запрос не будет выполнен.\");\n      return;\n    }\n\n    const url = `${this._baseUrl}/users/me/avatar`;\n    const hdr = this._headers;\n    hdr['Content-Type'] = 'application/json';\n    const opts = {\n      method: 'PATCH',\n      headers: hdr,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    };\n\n    return fetch(url, opts)\n    .then(this._checkResponse)\n    .then((result) => {\n      callback(result);\n    })\n    .catch((err) => {\n      errback(err);\n    })\n    .finally(finalback);\n  }\n}\n\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-30\",\n  headers: {\n    authorization: \"08bc75e7-78fb-46ea-8791-989ceb63ff7a\",\n    'Content-Type': 'application/json'\n  },\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}